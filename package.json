{
  "name": "linkmagico-chatbot-v5-professional",
  "version": "5.0.0",
  "description": "Chatbot com extraÃ§Ã£o de dados via API ScrapingBee para contornar bloqueios.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "node-fetch": "^2.6.7",
    "cheerio": "^1.0.0-rc.12",
    "dotenv": "^16.0.3"
  }
}```

#### 2. `server.js` (Com a API Anti-Bloqueio ScrapingBee)
```javascript
require('dotenv').config();
const express = require('express');
const cors = require('cors');
const fetch = require('node-fetch');
const cheerio = require('cheerio');

const app = express();
const PORT = process.env.PORT || 3000;
const SCRAPING_BEE_API_KEY = process.env.SCRAPING_BEE_API_KEY;

app.use(cors());
app.use(express.json());
app.use(express.static(__dirname));

if (!SCRAPING_BEE_API_KEY) {
    console.error("ERRO FATAL: SCRAPING_BEE_API_KEY nÃ£o definida no .env");
    process.exit(1);
}

async function extractDataWithScrapingBee(targetUrl) {
    console.log(`[ScrapingBee] Iniciando extraÃ§Ã£o para: ${targetUrl}`);
    const encodedUrl = encodeURIComponent(targetUrl);
    const apiEndpoint = `https://app.scrapingbee.com/api/v1/?api_key=${SCRAPING_BEE_API_KEY}&url=${encodedUrl}&render_js=true`;

    try {
        const response = await fetch(apiEndpoint );
        if (!response.ok) {
            throw new Error(`API do ScrapingBee falhou com status: ${response.status}`);
        }
        const html = await response.text();
        const $ = cheerio.load(html);

        const title = $('title').first().text().trim() || $('h1').first().text().trim();
        const priceMatch = $.text().match(/R\$\s?(\d{1,3}(?:\.\d{3})*,\d{2})/);
        const price = priceMatch ? priceMatch[0] : 'NÃ£o encontrado na pÃ¡gina';

        console.log(`[ScrapingBee] ExtraÃ§Ã£o bem-sucedida para: ${title}`);
        return { title, price };
    } catch (error) {
        console.error(`[ScrapingBee] Erro CrÃ­tico: ${error.message}`);
        return { error: true, message: error.message };
    }
}

app.post('/api/extract', async (req, res) => {
    const { url } = req.body;
    if (!url) return res.status(400).json({ error: "URL Ã© obrigatÃ³ria" });
    const data = await extractDataWithScrapingBee(url);
    res.json(data);
});

app.post('/api/chat', (req, res) => {
    const { message, productData } = req.body;
    if (!message || !productData) return res.status(400).json({ error: "Dados insuficientes" });

    let response = `Sobre o produto "${productData.title}", nÃ£o encontrei essa informaÃ§Ã£o.`;
    if (message.toLowerCase().includes('preÃ§o') || message.toLowerCase().includes('valor')) {
        response = `De acordo com a pÃ¡gina, o preÃ§o do "${productData.title}" Ã© ${productData.price}.`;
    }
    res.json({ response });
});

app.listen(PORT, () => {
    console.log(`ðŸš€ Servidor v5.0 (ScrapingBee) iniciado na porta ${PORT}`);
});
